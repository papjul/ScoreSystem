<?php/**  * Score System * Copyright © 2011-2012 Julien Papasian * * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with this program. If not, see <http://www.gnu.org/licenses/>. */### Initializationdefine('ROOT', dirname( __FILE__ ));require_once ROOT.'/init.php';require_once ROOT.'/config.php';require_once ROOT.'/functions.php';global $siteList;### Start# No form submitted?if(!isset($_REQUEST['u']) || !isset($_REQUEST['site'])){    ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr">    <head>        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />        <meta http-equiv="content-style-type" content="text/css" />        <meta http-equiv="content-language" content="english" />        <meta name="robots" content="noindex,nofollow" />        <title>Score System</title>        <link href="<?php echo URL_WEBSITE; ?>/style.css" rel="stylesheet" type="text/css" />    </head>    <body>        <h2>Score System</h2>        <p><strong>Status</strong></p>        <p>        <?php        foreach($siteList as $curSite)            echo $curSite['name'].' service is '.($curSite['status'] ? '<span style="color: green;">enabled</span>' : '<span style="color: red;">disabled</span>').'.<br />';        ?>        </p>        <p>Stats are regenerated every <?php echo CACHE_TIME_HOUR; ?> hours.</p>        <p>&nbsp;</p>        <h4>Generate your stats</h4>        <form method="post" action="index.php">            <p><input type="text" name="u" size="11" />            <select id="site" name="site">                <?php                foreach($siteList as $kCurSite => $vCurSite)                {                    echo '<option value="'.$kCurSite.'">'.$vCurSite['name'].'</option>';                }                ?>            </select>            <input type="submit" id="submit" name="submit" value="OK" class="login_submit" /></p>        </form>        <p>&nbsp;</p>        <p>Copyright © 2011-2012 <a href="https://github.com/Yurienu/ScoreSystem">Score System</a></p>    </body></html>    <?php    exit();}# Prevent _REQUEST from containing special charactersif(preg_match('`\.\.`', $_REQUEST['u']) || preg_match('`\.\.`', $_REQUEST['site']) || preg_match('`http\:\/\/`i', $_REQUEST['u']) || preg_match('`http\:\/\/`i', $_REQUEST['site']) || is_int(strpos($_SERVER['QUERY_STRING'], '..')) || is_int(strpos($_SERVER['QUERY_STRING'], 'http://')) || is_int(strpos($_SERVER['QUERY_STRING'], '%3C%3F'))) exit('What were you expecting to do?');# Constantsdefine('USER', trim($_REQUEST['u']));    define('SITE', trim($_REQUEST['site']));# We check that the website is allowedif(!isset($siteList[SITE]) || !$siteList[SITE]['status']) exit('You’re not allowed to fetch data from this website');# If we enabled URL rewriting, we redirect the user to the right location$url_rewritten = URL_WEBSITE.'/'.SITE.'/'.USER.'.png';$current_url = isset($_SERVER['REDIRECT_SCRIPT_URI']) ? $_SERVER['REDIRECT_SCRIPT_URI'] : 'http://'.$_SERVER['SERVER_NAME'].''.$_SERVER['REQUEST_URI'];if(URL_REWRITING && $current_url != $url_rewritten){    header('Status: 301 Moved Permanently', false, 301);    header('Location: '.$url_rewritten);}# Generating an image can take a long time (ignored in safe mode, in PHP 5.3)set_time_limit(60);### First step: If we don’t need to reload stats, we go straight to the imageif(file_exists(ROOT.'/cache/'.SITE.'/'.USER) && NOW < (file_get_contents(ROOT.'/cache/'.SITE.'/'.USER) + CACHE_TIME)){    header('Content-type: image/png');    exit(file_get_contents(ROOT.'/images/'.SITE.'/'.USER.'.png'));}# To prevent botsif(isset($_SESSION['last_visit']) && $_SESSION['last_visit'] > intval(NOW - TIME_NEXTGEN)) exit('Please wait a few seconds before generating another image');$_SESSION['last_visit'] = NOW;### Second step: Reading file online$fileXML = $siteList[SITE]['url_before'].''.USER.''.$siteList[SITE]['url_after'];$stringXML = file_get_contents($fileXML);if(preg_match('#'.$siteList[SITE]['error'].'#', $stringXML)) exit('No such username');# Listal need some particular treatmentsif(SITE == 'listal') $stringXML = preg_replace('#listal:rating#', 'rating', $stringXML);$xml = simplexml_load_string($stringXML);# Prevent PHP from triggering a notice$scores = array(0 => 0, 1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0, 8 => 0, 9 => 0, 10 => 0);# Loop through our arrayif($siteList[SITE]['oneMoreChild'])    foreach($xml->children() as $child)        foreach($child->$siteList[SITE]['elementParent'] as $subchild)            ++$scores[intval($subchild->$siteList[SITE]['element'])];else    foreach($xml->$siteList[SITE]['elementParent'] as $child)        ++$scores[intval($child->$siteList[SITE]['element'])];### Third step: Generating PHP image with Gd# Treating scores$unrated = $scores[0];unset($scores[0]);$score_max = max($scores) + 1; # Division by zero# Dimensions$width  = 280;$height = 298;$width_right = 54;$width_left  = 50;$width_avail = $width - ($width_left + $width_right);## Create image$im = @ImageCreate($width, $height) or exit('Failed to create image');## Colors# Default$white = ImageColorAllocate($im, 255, 255, 255);$grey  = ImageColorAllocate($im, 127, 127, 127);$black = ImageColorAllocate($im,   0,   0,   0);# From percentage$color_80 = ImageColorAllocate($im, 230, 30, 30);$color_60 = ImageColorAllocate($im, 210, 40, 40);$color_40 = ImageColorAllocate($im, 190, 50, 50);$color_20 = ImageColorAllocate($im, 170, 60, 60);$color_0  = ImageColorAllocate($im, 150, 70, 70);## Headerimagettftext($im, 11, 0, 5, 14, $black, FONT, USER);imagettftext($im, 9, 0, right_text($siteList[SITE]['type'], 9, $im), 14, $black, FONT, $siteList[SITE]['type']);imageline($im, 5, 14, $width - 10, 14, $grey);imagettftext($im, 7, 0, right_text('calculated: '.date('j\ F\ Y\ H\:i\ O', NOW), 7, $im), 25, $grey, FONT, 'calculated: '.date('j\ F\ Y\ H\:i\ O', NOW));# Drawing each of the 10 ratingsfor($rating = 1; $rating <= 10; ++$rating){    ## Numbers    # Height    $space = 3; # Space between two bars    $height_bar = 20;    $height_min = 30;    # Width    $rating_desc = 11 - $rating; # To get 10 first, then 9, 8, 7… until 1    $widthBarImage = ceil(((($scores[$rating_desc]) * ($width_avail)) / $score_max));    # Total    $x1 = 50;    $y1 = $height_min + (($rating - 1) * ($height_bar + $space));    $x2 = $x1 + ($widthBarImage);    $y2 = $y1 + $height_bar;    $color = get_color($scores[$rating_desc], $score_max, $im);    ## Drawing    imageline($im, $x2 + 1, $y1, $x2 + 1, $y2 + 1, $grey); # Grey bottom on right    imageline($im,  10, $y2 + 1, $x2 + 1, $y2 + 1, $grey); # Grey bottom on bottom    # Drawing a bar from percentage of score    ImageFilledRectangle($im,  10, $y1, $x1, $y2, $color); # Prefilled bar    ImageFilledRectangle($im, $x1, $y1, $x2, $y2, $color); # Actual bar        ## Writing the current rating on the right    $rectif_y = 5;    if($rating_desc != 10)    {        imagettftext($im, 10, 0, 19, $y2 - 1 - $rectif_y, $white, FONT, $rating_desc);        imagettftext($im, 10, 0, 19, $y2 + 1 - $rectif_y, $white, FONT, $rating_desc);        imagettftext($im, 10, 0, 21, $y2 - 1 - $rectif_y, $white, FONT, $rating_desc);        imagettftext($im, 10, 0, 21, $y2 + 1 - $rectif_y, $white, FONT, $rating_desc);        imagettftext($im, 10, 0, 20, $y2     - $rectif_y, $black, FONT, $rating_desc);    }    else    {        imagettftext($im, 10, 0, 16, $y2 - 1 - $rectif_y, $white, FONT, $rating_desc);        imagettftext($im, 10, 0, 16, $y2 + 1 - $rectif_y, $white, FONT, $rating_desc);        imagettftext($im, 10, 0, 18, $y2 - 1 - $rectif_y, $white, FONT, $rating_desc);        imagettftext($im, 10, 0, 18, $y2 + 1 - $rectif_y, $white, FONT, $rating_desc);        imagettftext($im, 10, 0, 17, $y2     - $rectif_y, $black, FONT, $rating_desc);    }    ## How many of this rating?    imagettftext($im, 10, 0, right_text($scores[$rating_desc], 10, $im), $y2 - $rectif_y, $grey, FONT, $scores[$rating_desc]);}# Legend in footerimagettftext($im, 8, 0, 20, $height - 20, $black, FONT, 'Unrated:');imagettftext($im, 8, 0, 20, $height -  5, $black, FONT, 'Average score:');imagettftext($im, 8, 0, right_text($unrated, 8, $im), $height - 20, $black, FONT, $unrated);imagettftext($im, 8, 0, right_text(get_average($scores), 8, $im), $height - 5, $black, FONT, get_average($scores));## Saving our image in pngImagepng($im, ROOT.'/images/'.SITE.'/'.USER.'.png');### Last step: Updating cache filefile_put_contents(ROOT.'/cache/'.SITE.'/'.USER, NOW);# We can now set the right headerheader('Content-type: image/png');### Now, let’s show our image!echo file_get_contents(ROOT.'/images/'.SITE.'/'.USER.'.png');/** EOF /**/